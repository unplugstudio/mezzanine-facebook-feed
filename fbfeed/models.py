# -*- coding: utf-8 -*-
from __future__ import unicode_literals, absolute_import

try:  # Python 3
    from urllib.parse import urlencode
except ImportError:  # Puthon 2
    from urllib import urlencode

import requests

from datetime import timedelta

from django.core.cache import cache
from django.core.urlresolvers import reverse
from django.db import models
from django.utils.encoding import python_2_unicode_compatible
from django.utils.timezone import now

from mezzanine.conf import settings
from mezzanine.core.models import TimeStamped
from mezzanine.utils.sites import current_request


class FacebookSettingError(Exception):
    pass


class GraphAPIError(Exception):
    """
    https://github.com/mobolic/facebook-sdk/blob/master/facebook/__init__.py
    """

    def __init__(self, result):
        self.result = result
        self.code = None
        self.error_subcode = None

        try:
            self.type = result["error_code"]
        except (KeyError, TypeError):
            self.type = ""

        # OAuth 2.0 Draft 10
        try:
            self.message = result["error_description"]
        except (KeyError, TypeError):
            # OAuth 2.0 Draft 00
            try:
                self.message = result["error"]["message"]
                self.code = result["error"].get("code")
                self.error_subcode = result["error"].get("error_subcode")
                if not self.type:
                    self.type = result["error"].get("type", "")
            except (KeyError, TypeError):
                # REST server style
                try:
                    self.message = result["error_msg"]
                except (KeyError, TypeError):
                    self.message = result

        Exception.__init__(self, self.message)


@python_2_unicode_compatible
class Access(TimeStamped):

    name = models.CharField("Name", max_length=200)
    facebook_id = models.CharField(
        "Facebook ID", max_length=100, default="me", help_text="Use 'me' to view your own posts"
    )
    token = models.CharField("Access token", max_length=500, blank=True)
    token_type = models.CharField("Token type", max_length=200, blank=True)
    expires = models.DateTimeField("Expires", blank=True, null=True)

    class Meta:
        verbose_name = "access"
        verbose_name_plural = "accesses"

    def __str__(self):
        return self.name

    @property
    def app_id(self):
        value = settings.FACEBOOK_APP_ID
        if not value:
            raise FacebookSettingError("Set the Facebook App ID in settings")
        return value

    @property
    def app_secret(self):
        value = settings.FACEBOOK_APP_SECRET
        if not value:
            raise FacebookSettingError("Set the Facebook App Secret in settings")
        return value

    def get_redirect_url(self):
        """
        Build the redirect URL required by Facebook (including the domain and scheme)
        """
        request = current_request()
        return request.build_absolute_uri(reverse("admin:fbfeed_redirect_endpoint"))

    def get_login_url(self):
        """
        Build the URL that invokes the Facebook login dialog
        """
        return "https://www.facebook.com/v6.0/dialog/oauth?" + urlencode(
            {"client_id": self.app_id, "redirect_uri": self.get_redirect_url(), "state": self.id}
        )

    def get_token_from_code(self, code):
        """
        Exchange the short code generated by the Facebook login dialog for an access token
        """
        url = "https://graph.facebook.com/v6.0/oauth/access_token?" + urlencode(
            {
                "client_id": self.app_id,
                "redirect_uri": self.get_redirect_url(),
                "client_secret": self.app_secret,
                "code": code,
            }
        )
        response = requests.get(url).json()
        if "error" in response:
            raise GraphAPIError(response)
        self.token = response["access_token"]
        self.token_type = response["token_type"]
        self.expires = now() + timedelta(seconds=response["expires_in"])
        self.save()

    def get_photos(self, limit=10, clear_cache=False):
        """
        Get photos as a list of Photo nodes.
        https://developers.facebook.com/docs/graph-api/reference/photo/
        """
        CACHE_KEY = "fbfeed_photos_{}".format(self.pk)
        data = cache.get(CACHE_KEY)

        # Serve from cache if available
        if not clear_cache and data is not None:
            return data[:limit]

        url = "https://graph.facebook.com/v6.0/{}/photos?".format(self.facebook_id)
        url += urlencode(
            {
                "fields": "alt_text,link,images",
                "type": "uploaded",
                "limit": limit,
                "access_token": self.token,
            }
        )
        response = requests.get(url).json()

        if "error" in response:
            raise GraphAPIError(response)

        data = response.get("data", [])
        cache.set(CACHE_KEY, data, 60 * 15)
        return data[:limit]
